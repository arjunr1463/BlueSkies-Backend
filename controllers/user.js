const User = require("../models/user");
const sharp = require("sharp");
const nodemailer = require("nodemailer");
const randomstring = require("randomstring");
const validator = require("validator");
const jwt = require("jsonwebtoken");

//Create a new user
const createUser = async (req, res) => {
  try {
    const {
      name,
      course,
      mobile,
      email,
      qualification,
      certified,
      address,
      coursefee,
      paymenttype,
      coursestart,
      courseend,
    } = req.body;
    if (
      !name ||
      !course ||
      !mobile ||
      !email ||
      !qualification ||
      !address ||
      !coursefee ||
      !paymenttype ||
      !coursestart ||
      !courseend
    ) {
      return res.status(400).json("All fields are required");
    }
    if (!validator.isEmail(email)) {
      return res.status(400).json("Invalid email address");
    }
    if (!/^[0-9]{10}$/.test(mobile)) {
      return res.status(400).json("Invalid phone number");
    }
    const userExists = await User.findOne({ $or: [{ email }, { mobile }] });
    if (userExists) {
      if (userExists.email === email) {
        return res.status(400).json("Email address is already registered");
      } else {
        return res.status(400).json("Phone number is already registered");
      }
    }
    const count = await User.countDocuments({});
    const userId = `BS${(count + 1).toString().padStart(3, "0")}`;
    const user = new User({
      name,
      course,
      mobile,
      email,
      qualification,
      certified,
      address,
      coursefee,
      paymenttype,
      coursestart,
      courseend,
      image: {
        data: await sharp(req.file.buffer).resize(200).toBuffer(),
        contentType: req.file.mimetype,
      },
    });
    const password = randomstring.generate(6);
    user.password = password;
    user.studentid = userId;
    await user.save();
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.Email,
        pass: process.env.Email_Pass,
      },
    });
    const mailOptions = {
      from: process.env.Email_From,
      to: user.email,
      subject: "Your autogenerated password for our site",
      html: `<p>Your autogenerated password is: <b>${password}</b></p>`,
    };
    await transporter.sendMail(mailOptions);

    res.json("Successfully created");
  } catch (error) {
    console.error(error);
    res.status(500).json("Something went wrong");
  }
};

//getUserAdminPanel
const getAllUsers = async (req, res) => {
  try {
    const users = await User.find();

    res.status(200).json(users);
  } catch (err) {
    console.error(err);
    res.status(500).json("Something went wrong");
  }
};

//getSingleUser
const getSingleUser = async (req, res) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;
    const user = await User.findById(userId);
    res.json(user);
  } catch {
    res.status(500).json("Something wen wrong");
  }
};

//login
const Login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).send({ error: "Login failed. Email not found." });
    }

    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res
        .status(400)
        .send({ error: "Login failed. Incorrect password." });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1d",
    });
    res.send({ token });
  } catch (error) {
    res.status(400).send({ error: "Login failed. Please try again." });
  }
};

//Logout
const Logout = async (req, res) => {
  const token = req.headers.authorization.split(" ")[1];
  if (!token) return res.status(401).send("Access Denied");

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    decoded.exp = Math.floor(Date.now() / 1000) - 10;
    const expiredToken = jwt.sign(decoded, process.env.JWT_SECRET);

    res.send({
      message: "Token has been expired",
      expiredToken,
    });
  } catch (error) {
    res.status(400).send("Invalid Token");
  }
};

//Delete
const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await User.findOneAndDelete({ studentid: id });
    if (!user) {
      return res.status(404).json("User not found");
    }
    res.json("Successfully deleted");
  } catch (error) {
    console.error(error);
    res.status(500).json("Something went wrong");
  }
};

const deletemultiple = async (req, res) => {
  try {
    const idsToDelete = req.body.ids;
    const result = await User.deleteMany({ _id: { $in: idsToDelete } });
    res.json({ success: true, deletedRowsCount: result.deletedCount });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "An error occurred while deleting users" });
  }
};

//update
const editUser = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      name,
      course,
      mobile,
      email,
      qualification,
      certified,
      address,
      coursefee,
      paymenttype,
      coursestart,
      courseend,
    } = req.body;

    const user = await User.findOneAndUpdate(
      { studentid: id },
      {
        name,
        course,
        mobile,
        email,
        qualification,
        certified,
        address,
        coursefee,
        paymenttype,
        coursestart,
        courseend,
        image: {
          data: await sharp(req.file.buffer).resize(200).toBuffer(),
          contentType: req.file.mimetype,
        },
      },
      { new: true }
    );
    if (!user) {
      return res.status(404).json("User not found");
    }
    res.json("Successfully updated");
  } catch (error) {
    console.error(error);
    res.status(500).json("Something went wrong");
  }
};


//changepassword
const ChangePassword = async (req, res) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.id;
    const user = await User.findById(userId);
    if (!user) return res.status(404).send({ message: "User not found" });
    else {
      if (req.body.oldpassword === user.confirmpassword) {
        if (req.body.newpassword !== req.body.newconfirmpassword) {
          res.json("Password doesnt match");
        } else {
          await User.findOneAndUpdate(
            (user.password = req.body.newpassword),
            (user.confirmpassword = req.body.newpassword)
          );
          res.json("Password successfully changed");
          user.save();
        }
      } else {
        return res.status(400).send({ error: "old password is incorrect" });
      }
    }
  } catch (err) {
    res.json("error");
    console.log(err);
  }
};

module.exports = {
  createUser,
  Login,
  Logout,
  getAllUsers,
  getSingleUser,
  editUser,
  deleteUser,
  deletemultiple
};
